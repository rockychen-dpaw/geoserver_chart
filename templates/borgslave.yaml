#borgslave statefule
{{- if hasKey $.Values "borgslave" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}-borgslave
spec:
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name }}-borgslave
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: {{ $.Release.Name }}-borgslave-headless
  template:
    metadata:
      creationTimestamp: null
      labels:
        #same as matchLabels
        workload.user.cattle.io/workloadselector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name }}-borgslave
    spec:
      containers:
        - command:
            - /borgslave/bin/start_sync
          image: {{ $.Values.borgslave.image }}
          imagePullPolicy: Always
          name: {{ $.Release.Name }}-borgslave
          env:
            - name: SLAVE_NAME
              value: {{ $.Release.Name | quote }}
            - name: RELEASE_TIME
            {{- if eq ($.Values.borgslave.releaseTime | default "")  "" }}
              value: {{ now | date "2006-01-02T15:04:05" | quote }}
            {{- else }}
              value: {{ $.Values.borgslave.releaseTime | quote }}
            {{- end }}
            {{- if ($.Values.geoserver.clustering | default false) }}
            - name: GEOSERVER_URL
              {{- $urls := "" }}
              {{- range $i,$v := until ($.Values.geoserver.replicas | default 2 | int ) }}
                {{- if eq $v 0 }}
                  {{- $urls = printf "http://%s-geoclusteradmin:%d/geoserver" $.Release.Name ($.Values.geoserver.port | default 8080 | int)}}
                {{- else }}
                  {{- $urls = printf "%s,http://%s-geoclusterslave%d:%d/geoserver" $urls $.Release.Name $v ($.Values.geoserver.port | default 8080 | int) }}
                {{- end }}
              {{- end }}
              value: {{ $urls | quote }}
            - name: GEOSERVER_CLUSTERING
              value: "True"
            {{- else }}
            - name: GEOSERVER_URL
              value: "http://{{$.Release.Name}}-geoserver:{{ $.Values.geoserver.port | default 8080 }}/geoserver"
            - name: GEOSERVER_CLUSTERING
              value: "False"
            {{- end }}
            {{- range $key,$value := $.Values.borgslave.envs | default dict }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            {{- range $name,$data := $.Values.borgslave.secrets }}
            - secretRef:
                name: {{ $.Release.Name }}-borgslave-secret-{{ $name }}
                optional: false
            {{- end }}
            {{- range $name,$data := $.Values.borgslave.configmaps }}
            - configMapRef:
                name: {{ $.Release.Name }}-borgslave-configmap-{{ $name }}
                optional: false
            {{- end }}
          {{- if $.Values.borgslave.resources }}
          resources:
{{ $.Values.borgslave.resources | toYaml | indent 12 }}
          {{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
          stdin: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            {{- if hasKey $.Values.borgslave "groupid" }}
            runAsGroup: {{ $.Values.borgslave.groupid }}
            {{- end }}
            runAsNonRoot: true
            {{- if hasKey $.Values.borgslave "userid" }}
            runAsUser: {{ $.Values.borgslave.userid }}
            {{- end }}
          volumeMounts:
          - name: scripts
            mountPath: "/borgslave/bin"
          {{- range $type,$volumes := $.Values.borgslave.volumes}}
          {{- range $name,$config := $volumes}}
          {{- range $i,$mount := $config.mounts }}
          - mountPath: {{ $mount.mountPath | quote }}
            name: {{ $name }}
            {{- if hasKey $mount "subPath" }}
            subPath: {{ $mount.subPath | quote }}
            {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: {{ $.Release.Name }}-borgslave-secret-imagepull
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- if hasKey $.Values.borgslave "groupid" }}
      securityContext:
        fsGroup: {{ $.Values.borgslave.groupid }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      {{- if $.Values.borgslave.tolerations }}
      tolerations:
{{ $.Values.borgslave.tolerations | toYaml | indent 8 }}
      {{- end }}
      {{- if not (empty $.Values.borgslave.volumes) }}
      volumes:
      - name: scripts
        configMap:
          name: {{ $.Release.Name }}-borgslave-configmap-scripts
          optional: false
          defaultMode: 0555
      {{- range $name,$config := get ($.Values.borgslave.volumes | default dict) "secrets" | default dict }}
      - name: {{ $name }}
        secret:
          {{- if hasKey $config "defaultMode" }}
          defaultMode: {{ $config.defaultMode }}
          {{- end }}
          {{- if hasKey $config "optional" }}
          optional: {{ $config.optional }}
          {{- end }}
          secretName: {{ $.Release.Name }}-borgslave-volume-secret-{{ $name }}
      {{- end }}
      {{- range $name,$config := get ($.Values.borgslave.volumes | default dict) "pvcs" | default dict }}
      - name: {{ $name }}
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-borgslave-{{ $name }}
      {{- end }}
      {{- end }}
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
{{- end}}
