{{- if ($.Values.geoserver.clustering | default false) }}
{{- $startupProbe :=  $.Values.geoserver.startupProbe | default dict }}
{{- $livenessProbe :=  $.Values.geoserver.livenessProbe | default dict }}
{{- $adminServerIsWorker :=  true }}
{{- if hasKey $.Values.geoserver "adminServerIsWorker" }}
  {{- $adminServerIsWorker =  $.Values.geoserver.adminServerIsWorker }}
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}-geocluster
spec:
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name }}-geocluster
  podManagementPolicy: OrderedReady
  replicas: {{ $.Values.geoserver.replicas | default 2 }}
  revisionHistoryLimit: 10
  serviceName: {{ $.Release.Name }}-geocluster-headless
  template:
    metadata:
      creationTimestamp: null
      labels:
        #same as matchLabels
        workload.user.cattle.io/workloadselector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name }}-geocluster
    spec:
      {{- if and (gt ($.Values.geoserver.replicas | default 1 | int) 1 ) (get $.Values.geoserver "topologySpreadConstraints") }}
      #only include the topology if replicas is greater than 1
      topologySpreadConstraints:
      {{- range $i,$constraint := $.Values.geoserver.topologySpreadConstraints }}
      - maxSkew: {{ $constraint.maxSkew | default 1 | int }}
        topologyKey: {{ $constraint.topologyKey }}
        {{- if eq ($constraint.whenUnsatisfiable | default "ScheduleAnyway") "DoNotSchedule" }}
        minDomains: {{ $constraint.minDomains | default 1 | int }}
        {{- end }}
        whenUnsatisfiable: {{ $constraint.whenUnsatisfiable | default "ScheduleAnyway" }}
        labelSelector:
          matchLabels:
            workload.user.cattle.io/workloadselector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name }}-geocluster
      {{- end }}
      {{- end }}
      initContainers:
        - name: {{ $.Release.Name }}-geocluster-init
          image: {{ $.Values.geoserver.image }}
          imagePullPolicy: Always
          command:
            - /geoserver/bin/init_geoserver
          env:
            - name: CLUSTER_DURABILITY
              value: "false"
            - name: BROKER_URL
            {{- if $.Values.geoserver.brokerUrl }}
              value: {{ $.Values.geoserver.brokerUrl | quote }}
            {{- else }}
              value: "tcp://{{ $.Release.Name }}-mq-headless:61616"
            {{- end }}
            - name: CLUSTERING
              value: "true"
            - name: EMBEDDED_BROKER
              value: "disabled"
            {{- range $key,$value := $.Values.geoserver.envs | default dict }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            {{- range $name,$data := $.Values.geoserver.secrets | default dict }}
            - secretRef:
                name: {{ $.Release.Name }}-geoserver-secret-{{ $name }}
                optional: false
            {{- end }}
            {{- range $name,$data := $.Values.geoserver.configmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-configmap-{{ $name }}
                optional: false
            {{- end }}
            {{- if not $adminServerIsWorker }}
            {{- range $name,$data := $.Values.geoserver.slaveConfigmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-slaveconfigmap-{{ $name }}
                optional: false
            {{- end }}
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            {{- if hasKey $.Values.geoserver "groupid" }}
            runAsGroup: {{ $.Values.geoserver.groupid }}
            {{- end }}
            {{- if hasKey $.Values.geoserver "userid" }}
            runAsUser: {{ $.Values.geoserver.userid }}
            runAsNonRoot: true
            {{- else}}
            runAsNonRoot: false
            {{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: config-files
              mountPath: "/geoserver/settings"
            - name: scripts
              mountPath: "/geoserver/bin"
            {{- if $.Values.geoserverHealthcheck }}
            - name: report-data
              mountPath: "/geoserver/reports"
            {{- end }}
            {{- range $type,$volumes := $.Values.geoserver.volumes}}
            {{- range $name,$config := $volumes}}
            {{- range $i,$mount := $config.mounts }}
            - mountPath: {{ $mount.mountPath | quote }}
              name: {{ $name }}
              {{- if hasKey $mount "subPath" }}
              subPath: {{ $mount.subPath | quote }}
              {{- end }}
            {{- end }}  
            {{- end }}
            {{- end }}
      containers:
        - name: {{ $.Release.Name }}-geocluster
          image: {{ $.Values.geoserver.image }}
          imagePullPolicy: Always
          command:
            - /geoserver/bin/start_geoserver
          stdin: true
          stdinOnce: false
          tty: true
          env:
            - name: GEOSERVER_UID
              value: {{ $.Values.geoserver.userid | default 1000 | quote }}
            - name: GEOSERVER_GID
              value: {{ $.Values.geoserver.groupid | default 1000 | quote  }}
            - name: USER
              value: {{ $.Values.geoserver.user | default "geoserver" }}
            - name: GROUP_NAME
              value: {{ $.Values.geoserver.group | default "geoserver" }}
            - name: RELEASE_TIME
            {{- if eq ($.Values.geoserver.releaseTime | default "")  "" }}
              value: {{ now | date "2006-01-02T15:04:05" | quote }}
            {{- else }}
              value: {{ $.Values.geoserver.releaseTime | quote }}
            {{- end }}
            - name: CLUSTERING
              value: "true"
            - name: GEOSERVER_DISABLE_STATIC_WEB_FILES
              value: "false"
            - name: CLUSTER_DURABILITY
              value: "false"
            - name: EMBEDDED_BROKER
              value: "disabled"
            - name: BROKER_URL
            {{- if $.Values.geoserver.brokerUrl }}
              value: {{ $.Values.geoserver.brokerUrl | quote }}
            {{- else }}
              value: "tcp://{{ $.Release.Name }}-mq-headless:61616"
            {{- end }}
            {{- range $key,$value := $.Values.geoserver.envs | default dict }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            {{- range $name,$data := $.Values.geoserver.secrets | default dict }}
            - secretRef:
                name: {{ $.Release.Name }}-geoserver-secret-{{ $name }}
                optional: false
            {{- end }}
            {{- range $name,$data := $.Values.geoserver.configmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-configmap-{{ $name }}
                optional: false
            {{- end }}
            {{- if not $adminServerIsWorker }}
            {{- range $name,$data := $.Values.geoserver.slaveConfigmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-slaveconfigmap-{{ $name }}
                optional: false
            {{- end }}
            {{- end }}
          startupProbe:
            failureThreshold: {{ $startupProbe.failureThreshold | default 30 }}
            successThreshold: {{ $startupProbe.successThreshold | default 1 }}
            initialDelaySeconds: {{ $startupProbe.initialDelaySeconds | default 30 }}
            timeoutSeconds: 1
            periodSeconds: {{ $startupProbe.periodSeconds | default 2 }}
            exec:
              command:
                - /geoserver/bin/geoserver_startup
          livenessProbe:
            failureThreshold: 1
            successThreshold: 1
            initialDelaySeconds: {{ $livenessProbe.initialDelaySeconds | default 10 }}
            timeoutSeconds: {{ ceil (addf (mulf (sub ($.Values.geoserver.replicas | default 1) 1) ($.Values.geoserver.liveCheckTimeout | default 0.5)) ($.Values.geoserver.liveCheckTimeout | default 0.5) 1) | int}}
            periodSeconds: {{ $livenessProbe.periodSeconds | default 10 }}
            exec:
              command:
                - /geoserver/bin/geoserver_liveness
          {{- if $.Values.geoserver.resources }}
          resources:
{{ $.Values.geoserver.resources | toYaml | indent 12 }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            {{- if hasKey $.Values.geoserver "groupid" }}
            runAsGroup: {{ $.Values.geoserver.groupid }}
            {{- end }}
            {{- if hasKey $.Values.geoserver "userid" }}
            runAsUser: {{ $.Values.geoserver.userid }}
            runAsNonRoot: true
            {{- else}}
            runAsNonRoot: false
            {{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: config-files
              mountPath: "/geoserver/settings"
            - name: scripts
              mountPath: "/geoserver/bin"
            {{- if gt (len ($.Values.geoserver.customsettings | default list)) 0  }}
            {{- range $config := $.Values.geoserver.customsettings }}
            - name: geoserver-customsettings
              mountPath: "/geoserver/customsettings/{{$config.mountPath}}"
              subPath: {{$config.name}}
            {{- end }}  
            {{- end }}  
            {{- if $.Values.geoserverHealthcheck }}
            - name: report-data
              mountPath: "/geoserver/reports"
            {{- end }}
            {{- range $type,$volumes := $.Values.geoserver.volumes }}
            {{- range $name,$config := $volumes}}
            {{- range $i,$mount := $config.mounts }}
            - mountPath: {{ $mount.mountPath | quote }}
              name: {{ $name }}
              {{- if hasKey $mount "subPath" }}
              subPath: {{ $mount.subPath | quote }}
              {{- end }}
            {{- end }}  
            {{- end }}
            {{- end }}
            {{- range $name,$config := $.Values.geoserver.volumeClaimTemplates }}
            {{- range $i,$mount := $config.mounts }}
            - mountPath: {{ $mount.mountPath }}
              name: {{ $.Release.Name }}-geocluster-{{ $name }}
              {{- if hasKey $mount "subPath" }}
              subPath: {{ $mount.subPath }}
              {{- end }}
            {{- end }}  
            {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- if hasKey $.Values.geoserver "groupid" }}
      securityContext:
        fsGroup: {{ $.Values.geoserver.groupid }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      {{- if $.Values.geoserver.tolerations }}
      tolerations:
{{ $.Values.geoserver.tolerations | toYaml | indent 8 }}
      {{- end }}
      {{- if $.Values.geoserver.nodeSelector }}
      nodeSelector:
{{ $.Values.geoserver.nodeSelector | toYaml | indent 8 }}
      {{- end }}
      volumes:
      - name: config-files
        configMap:
          name: {{ $.Release.Name }}-geoserver-configmap-config-files
          optional: false
          defaultMode: 0777
      - name: scripts
        configMap:
          name: {{ $.Release.Name }}-geoserver-configmap-scripts
          optional: false
          defaultMode: 0555
      {{- if gt (len ($.Values.geoserver.customsettings | default list)) 0  }}
      - name: geoserver-customsettings
        configMap:
          name: {{ $.Release.Name }}-geoserver-configmap-customsettings
          optional: false
          defaultMode: 0777
      {{- end }}
      {{- if $.Values.geoserverHealthcheck }}
      - name: report-data
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-geoserver-healthcheck-report-data
      {{- end }}
      {{- range $name,$config := get ($.Values.geoserver.volumes | default dict) "secrets" | default dict }}
      - name: {{ $name }}
        secret:
          {{- if hasKey $config "defaultMode" }}
          defaultMode: {{ $config.defaultMode }}
          {{- end }}
          {{- if hasKey $config "optional" }}
          optional: {{ $config.optional }}
          {{- end }}
          secretName: {{ $.Release.Name }}-geoserver-volume-secret-{{ $name }}
      {{- end }}
      {{- range $name,$config := get ($.Values.geoserver.volumes | default dict) "pvcs" | default dict }}
      - name: {{ $name }}
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-geoserver-{{ $name }}
      {{- end }}
  volumeClaimTemplates:
    {{- range $name,$config := $.Values.geoserver.volumeClaimTemplates }}
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ $.Release.Name }}-geocluster-{{ $name }}
        namespace: {{ $.Release.Namespace }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ $config.storage}}
        storageClassName: {{ $config.storageClassName | default "managed-csi-retain" }}
        volumeMode: {{ $config.volumeMode | default "Filesystem" }}
          {{- end }}
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
{{- if not $adminServerIsWorker }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-geoclusteradmin
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-{{ $.Release.Namespace}}-{{ $.Release.Name }}-geoclusteradmin
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        workload.user.cattle.io/workloadselector: apps.deployment-{{ $.Release.Namespace}}-{{ $.Release.Name }}-geoclusteradmin
    spec:
      initContainers:
        - name: {{ $.Release.Name }}-geoclusteradmin-init
          image: {{ $.Values.geoserver.image }}
          imagePullPolicy: Always
          command:
            - /geoserver/bin/init_geoserver
          env:
            - name: CLUSTER_DURABILITY
              value: "false"
            - name: BROKER_URL
            {{- if $.Values.geoserver.brokerUrl }}
              value: {{ $.Values.geoserver.brokerUrl | quote }}
            {{- else }}
              value: "tcp://{{ $.Release.Name }}-mq-headless:61616"
            {{- end }}
            - name: CLUSTERING
              value: "true"
            - name: EMBEDDED_BROKER
              value: "disabled"
            {{- range $key,$value := $.Values.geoserver.envs | default dict }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            {{- range $name,$data := $.Values.geoserver.secrets | default dict }}
            - secretRef:
                name: {{ $.Release.Name }}-geoserver-secret-{{ $name }}
                optional: false
            {{- end }}
            {{- range $name,$data := $.Values.geoserver.configmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-configmap-{{ $name }}
                optional: false
            {{- end }}
            {{- range $name,$data := $.Values.geoserver.adminConfigmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-adminconfigmap-{{ $name }}
                optional: false
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            {{- if hasKey $.Values.geoserver "groupid" }}
            runAsGroup: {{ $.Values.geoserver.groupid }}
            {{- end }}
            {{- if hasKey $.Values.geoserver "userid" }}
            runAsUser: {{ $.Values.geoserver.userid }}
            runAsNonRoot: true
            {{- else}}
            runAsNonRoot: false
            {{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: config-files
              mountPath: "/geoserver/settings"
            - name: scripts
              mountPath: "/geoserver/bin"
            {{- if $.Values.geoserverHealthcheck }}
            - name: report-data
              mountPath: "/geoserver/reports"
            {{- end }}
            {{- range $type,$volumes := $.Values.geoserver.volumes}}
            {{- range $name,$config := $volumes}}
            {{- range $i,$mount := $config.mounts }}
            - mountPath: {{ $mount.mountPath | quote }}
              name: {{ $name }}
              {{- if hasKey $mount "subPath" }}
              subPath: {{ $mount.subPath | quote }}
              {{- end }}
            {{- end }}  
            {{- end }}
            {{- end }}
      containers:
        - name: {{ $.Release.Name }}-geoclusteradmin
          image: {{ $.Values.geoserver.image }}
          imagePullPolicy: Always
          command:
            - /geoserver/bin/start_geoserver
          stdin: true
          stdinOnce: false
          tty: true
          env:
            - name: GEOSERVER_UID
              value: {{ $.Values.geoserver.userid | default 1000 | quote }}
            - name: GEOSERVER_GID
              value: {{ $.Values.geoserver.groupid | default 1000 | quote  }}
            - name: USER
              value: {{ $.Values.geoserver.user | default "geoserver" }}
            - name: GROUP_NAME
              value: {{ $.Values.geoserver.group | default "geoserver" }}
            - name: RELEASE_TIME
            {{- if eq ($.Values.geoserver.adminReleaseTime | default "")  "" }}
              value: {{ now | date "2006-01-02T15:04:05" | quote }}
            {{- else }}
              value: {{ $.Values.geoserver.adminReleaseTime | quote }}
            {{- end }}
            - name: CLUSTERING
              value: "true"
            - name: GEOSERVER_DISABLE_STATIC_WEB_FILES
              value: "false"
            - name: CLUSTER_DURABILITY
              value: "false"
            - name: EMBEDDED_BROKER
              value: "disabled"
            - name: BROKER_URL
            {{- if $.Values.geoserver.brokerUrl }}
              value: {{ $.Values.geoserver.brokerUrl | quote }}
            {{- else }}
              value: "tcp://{{ $.Release.Name }}-mq-headless:61616"
            {{- end }}
            {{- range $key,$value := $.Values.geoserver.envs | default dict }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            {{- range $name,$data := $.Values.geoserver.secrets | default dict }}
            - secretRef:
                name: {{ $.Release.Name }}-geoserver-secret-{{ $name }}
                optional: false
            {{- end }}
            {{- range $name,$data := $.Values.geoserver.configmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-configmap-{{ $name }}
                optional: false
            {{- end }}
            {{- range $name,$data := $.Values.geoserver.adminConfigmaps | default dict }}
            - configMapRef:
                name: {{ $.Release.Name }}-geoserver-adminconfigmap-{{ $name }}
                optional: false
            {{- end }}
          startupProbe:
            failureThreshold: {{ $startupProbe.failureThreshold | default 30 }}
            successThreshold: {{ $startupProbe.successThreshold | default 1 }}
            initialDelaySeconds: {{ $startupProbe.initialDelaySeconds | default 30 }}
            timeoutSeconds: 1
            periodSeconds: {{ $startupProbe.periodSeconds | default 2 }}
            exec:
              command:
                - /geoserver/bin/geoserver_startup
          livenessProbe:
            failureThreshold: 1
            successThreshold: 1
            initialDelaySeconds: {{ $livenessProbe.initialDelaySeconds | default 10 }}
            timeoutSeconds: {{ ceil (addf ($.Values.geoserver.liveCheckTimeout | default 0.5) 1) | int}}
            periodSeconds: {{ $livenessProbe.periodSeconds | default 10 }}
            exec:
              command:
                - /geoserver/bin/geoserver_liveness
          {{- if or $.Values.geoserver.resources $.Values.geoserver.adminResources }}
          resources:
            {{- if $.Values.geoserver.adminResources }}
{{ $.Values.geoserver.adminResources | toYaml | indent 12 }}
            {{- else }}
{{ $.Values.geoserver.resources | toYaml | indent 12 }}
            {{- end }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            {{- if hasKey $.Values.geoserver "groupid" }}
            runAsGroup: {{ $.Values.geoserver.groupid }}
            {{- end }}
            {{- if hasKey $.Values.geoserver "userid" }}
            runAsUser: {{ $.Values.geoserver.userid }}
            runAsNonRoot: true
            {{- else}}
            runAsNonRoot: false
            {{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: config-files
              mountPath: "/geoserver/settings"
            - name: scripts
              mountPath: "/geoserver/bin"
            {{- if gt (len ($.Values.geoserver.customsettings | default list)) 0  }}
            {{- range $config := $.Values.geoserver.customsettings }}
            - name: geoserver-customsettings
              mountPath: "/geoserver/customsettings/{{$config.mountPath}}"
              subPath: {{$config.name}}
            {{- end }}  
            {{- end }}  
            {{- if $.Values.geoserverHealthcheck }}
            - name: report-data
              mountPath: "/geoserver/reports"
            {{- end }}
            {{- range $type,$volumes := $.Values.geoserver.volumes }}
            {{- range $name,$config := $volumes}}
            {{- range $i,$mount := $config.mounts }}
            - mountPath: {{ $mount.mountPath | quote }}
              name: {{ $name }}
              {{- if hasKey $mount "subPath" }}
              subPath: {{ $mount.subPath | quote }}
              {{- end }}
            {{- end }}  
            {{- end }}
            {{- end }}
            {{- range $name,$config := $.Values.geoserver.adminVolumes }}
            {{- range $i,$mount := $config.mounts }}
            - mountPath: {{ $mount.mountPath }}
              name: {{ $name }}
              {{- if hasKey $mount "subPath" }}
              subPath: {{ $mount.subPath }}
              {{- end }}
            {{- end }}  
            {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- if hasKey $.Values.geoserver "groupid" }}
      securityContext:
        fsGroup: {{ $.Values.geoserver.groupid }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      {{- if $.Values.geoserver.adminTolerations }}
      tolerations:
{{ $.Values.geoserver.adminTolerations | toYaml | indent 8 }}
      {{- end }}
      {{- if $.Values.geoserver.adminNodeSelector }}
      nodeSelector:
{{ $.Values.geoserver.adminNodeSelector | toYaml | indent 8 }}
      {{- end }}
      volumes:
      - name: config-files
        configMap:
          name: {{ $.Release.Name }}-geoserver-configmap-config-files
          optional: false
          defaultMode: 0777
      - name: scripts
        configMap:
          name: {{ $.Release.Name }}-geoserver-configmap-scripts
          optional: false
          defaultMode: 0555
      {{- if gt (len ($.Values.geoserver.customsettings | default list)) 0  }}
      - name: geoserver-customsettings
        configMap:
          name: {{ $.Release.Name }}-geoserver-configmap-customsettings
          optional: false
          defaultMode: 0777
      {{- end }}
      {{- if $.Values.geoserverHealthcheck }}
      - name: report-data
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-geoserver-healthcheck-report-data
      {{- end }}
      {{- range $name,$config := get ($.Values.geoserver.volumes | default dict) "secrets" | default dict }}
      - name: {{ $name }}
        secret:
          {{- if hasKey $config "defaultMode" }}
          defaultMode: {{ $config.defaultMode }}
          {{- end }}
          {{- if hasKey $config "optional" }}
          optional: {{ $config.optional }}
          {{- end }}
          secretName: {{ $.Release.Name }}-geoserver-volume-secret-{{ $name }}
      {{- end }}
      {{- range $name,$config := get ($.Values.geoserver.volumes | default dict) "pvcs" | default dict }}
      - name: {{ $name }}
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-geoserver-{{ $name }}
      {{- end }}
      {{- range $name,$config := $.Values.geoserver.adminVolumes | default dict }}
      - name: {{ $name }}
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-geoclusteradmin-{{ $name }}
      {{- end }}
{{- end }}
{{- end }}
